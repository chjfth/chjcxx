#### template file for use with pattern1.mks, [GnumakeUniproc v1.0]
# ! Be sure to replace every occurrence of <angle-brackets> to be your
# actual content, or [ at least comment them out if some of them are
# not required] .

#---------------------------------------------------------------------------
# This file is to be included by $(gmu_DIR_GNUMAKEUNIPROC)/pattern1.mks 
# after the "compiler-config" files have been included. Commonly, you write
# your source files and compiler/linker options in this file.
#---------------------------------------------------------------------------

############################################################################
# GMU-var: gmu_uf_LINK_OUTPUT
#	Define the link ouput filename for this project.
# Decoration may be applied to this name which results in $(gmu_Gf_Final_LinkOutput).
# Using function gmpf_MakeLibName to construct output name makes the name more portable.
############################################################################
gmu_uf_LINK_OUTPUT = $(call gmpf_MakeLibName,gadgetlib)

############################################################################
# GMU-var: gmu_ud_SRC_ROOT
#	Define the root dir where all your source files(.c, .cpp, not .h) reside in.
# You can use a relative dir here, but note, it is relative to make-var $(CURDIR),
# not to this mki file.
############################################################################
gmu_ud_SRC_ROOT = ../..
dirNlssvn = $(gmu_ud_SRC_ROOT)/../../..

############################################################################
# GMU-var: gmu_up_list_SRC_FROM_ROOT
#	Define your source files to compile, source files(dir prefix allowed) separated by spaces or tabs.
# You MUST use relative paths here, which are relative to $(gmu_ud_SRC_ROOT), 
# however, any of the resulting absolute path should not go up beyond $(gmu_ud_SRC_ROOT),
# e.g.
# * You cannot use ``../myfunc.c'', which actually resides in $(gmu_ud_SRC_ROOT)'s parent dir.
# * You can use ``subdir1/../myfunc.c'' or ``subdir1/subdir2/../myfunc.c'', which are 
#	still in $(gmu_ud_SRC_ROOT) or $(gmu_ud_SRC_ROOT)'s subdir.
############################################################################
gmu_up_list_SRC_FROM_ROOT += \
	time-common.cpp \
	charenccvt-common.cpp \

gmu_up_list_SRC_FROM_ROOT += $(if $(filter wince%,$(gmp_COMPILER_ID)),,fstream-aux.cpp)
	# WinCE 5.0 still don't provide fopen etc, so don't add it for WinCE .

############################################################################
# GMU-var: gmu_ud_list_PRJ_HEADER
#	Define header file dirs, multiple dirs should be separated by spaces or tabs.
# You can use relative dirs here, but note, they are relative to make-var $(CURDIR),
# not to this mki file.
#	This var serves two purposes:
#	1. They'll be passed to the compiler through ``-I <dir1> -I <dir2> ...'' .
#	2. They'll be passed to `$(gmu_GCC_M_PREFIX)gcc -M' in favor of generating hdepend files.
############################################################################
gmu_ud_list_PRJ_HEADER += $(gmu_ud_SRC_ROOT)/include
	# Don't write ``-I'' in this var; it will be prependded automatically.
# or
#gmp_ud_list_PS_HEADER_PARENT += (within gmp_PS_INCLUDE_SUBDIRS)

gmp_CFLAGS_INCLUDES += # $(addprefix -I,<dir1> <dir2> ...)
	# those -I xxx options (in case you don't want to list them in gmu_ud_list_PRJ_HEADER)
	# You must explicitly write ``-I'' before every dir in gmp_CFLAGS_INCLUDES

############################################################################
# GMU-vars: gmp_CFLAGS_XXX
#	Set specific compiler options for this project in the following vars:
# gmp_CFLAGS_CODE_GEN_ALL:
#	Any options that affect the generated binary code should be listed in it.
# gmp_CFLAGS_NON_CODE_GEN:
#	Any options that do not affect the generated binary code should be listed in it.
############################################################################

gmp_CFLAGS_CODE_GEN_ALL +=
  # You may want to dispense options for gmp_CFLAGS_CODE_GEN_ALL into following 2 categories:
  gmp_CFLAGS_MACRO_DEFS += $(gmp_CFLAGS_MACRO_DEFS_preset) # those macro defines, e.g. -Dxxx=yyy
  gmp_CFLAGS_CODE_GEN += $(gmp_CFLAGS_CODE_GEN_preset) # other code generation related options

gmp_CFLAGS_NON_CODE_GEN += $(gmp_CFLAGS_NON_CODE_GEN_preset)

# If some compiler options(.e.g -Dxxx ) must be passed to `gcc -M' command, set them here:
# (Note: Those include-dir options(-I xxx) don't have to be set here.)
gmu_u_GCC_M_OPTIONS +=


############################################################################
# List extra objs to link in gmu_up_list_EXTRA_OBJ_TO_LINK:
############################################################################
gmu_up_list_EXTRA_OBJ_TO_LINK +=


############################################################################
# GMU-vars: gmu_uv_list_SUBPRJ_LINK_FOR_PARENT
#	If your LIB project wants its sub-projects to be linked by
# its parent EXE project, the LIB project can assign those sub-projects in 
# this variable, so that your parent EXE project don't have to know what
# (further sub-projects) your current LIB project are depending on.
# It's amazing, really.
# ( note: If you don't use gmu_uv_list_SUBPRJ_LINK_FOR_PARENT at first,
# and later enable gmu_uv_list_SUBPRJ_LINK_FOR_PARENT, then you must clean 
# the old project output-dir first in order for that change to work. )
############################################################################
gmu_uv_list_SUBPRJ_LINK_FOR_PARENT = # <subprj-ref> ...

<subprj-ref>_Makefile = # where the sub-project's makefile resides
# If the sub-project's makefiles are to be checked-out from some repository, assign it here.
# >>>> For SVN checkout
<subprj-ref>_svnUrl_forMakefiles = # SVN Url for the checkout
	# Hint: $(call gmuf_MakeSvnRepositoryPath,<SVN-path-prefix-var>,<remaining-repository-path>)
<subprj-ref>_svnLocalDir_forMakefiles = # Local dir corresponding to the whole SVN URL
<subprj-ref>_svnRev = # Revision to use(string after svn's -r switch)
# <<<< For SVN checkout
# >>>> For CVS checkout
<subprj-ref>_cvsRoot_forMakefiles = # CVSROOT for the checkout
	# Hint: $(call gmuf_MakeCvsRepositoryPath,<CVS-server-var>,<repository-path-on-CVS-server>)
<subprj-ref>_cvsModuleDir_forMakefiles = # CVS module name or module dir to checkout
<subprj-ref>_cvsLocalDir_forMakefiles = # Local dir corresponding to CVSROOT
<subprj-ref>_cvsTag_forMakefiles = # Tag or branch to checkout(string after cvs's -r switch)
# <<<< For CVS checkout

include $(gmu_DIR_GNUMAKEUNIPROC)/nlscan/nlssvn-prjs.mki
$(call NlssvnLinkSubprjForParent,AnsiC_Tfuncs) # by dirfuncs, strlen etc
$(call NlssvnLinkSubprjForParent,mmsnprintf)
$(call NlssvnUseHeader,CommonInclude)

# ----------- below for plugins -----------

# If you use plugin PI_sync_devoutput, you may want to set:
# gmi_SYDO_ud_SYNC_HEADER_ROOT =
	#	The dir that your headers reside in. ( relative to $(CURDIR) )

# gmi_SYDO_up_list_SYNC_HEADERS =
	# List filepaths of the header files to sync. ( relative to $(gmi_SYDO_ud_SYNC_HEADER_ROOT) )

# gmi_SYDO_ud_SYNC_HEADER_TO = # (suggested to set as env-var or by parent project)
	# Where the headers will be sync-ed to.

# gmi_SYDO_ud_SYNC_LIB_TO = # (suggested to set as env-var or by parent project)
	# Where the static LIBs will be sync-ed to. Sync-source is $(gmp_Gp_list_LIB_OUTPUT) .

